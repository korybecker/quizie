// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quiz {
  id        String     @id @default(cuid())
  title     String
  questions Question[]
  published Boolean    @default(false)
  creator   User?      @relation(fields: [creatorId], references: [id])
  creatorId String?
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
}

model Question {
  id      String   @id @default(cuid())
  text    String?
  quiz    Quiz?    @relation(fields: [quizId], references: [id])
  quizId  String?
  options Option[]
}

model Option {
  id         String    @id @default(cuid())
  text       String
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  answer     Answer[]
}

model Answer {
  id        String  @id @default(cuid())
  option    Option? @relation(fields: [optionId], references: [id])
  optionId  String?
  isCorrect Boolean @default(false)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Quiz[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
